/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/et-nik/metamod-go */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */




#line 3 "hooks_funcs.go"

//extern void **GetVTable(void *pthis, int size);

#line 1 "cgo-generated-wrapper"

#line 3 "main.go"



#include <stdio.h>

#include <eiface.h>

#include "metamod/index.h"

int GetNewDLLFunctions(NEW_DLL_FUNCTIONS *pNewFunctionTable, int *interfaceVersion);
int GetEntityAPI2(DLL_FUNCTIONS* pFunctionTable, int* interfaceVersion);
int GetEntityAPI2_Post(DLL_FUNCTIONS* pFunctionTable, int* interfaceVersion);
int GetEngineFunctions(enginefuncs_t *pengfuncsFromEngine, int *interfaceVersion);
int GetEngineFunctions_Post(enginefuncs_t *pengfuncsFromEngine, int *interfaceVersion);

// Lib functions
extern void SetDLLFunctions(DLL_FUNCTIONS *pFunctionTable);
extern void SetDLLFunctionsPost(DLL_FUNCTIONS *pFunctionTable);
extern void SetHooks(enginefuncs_t *pengfuncsFromEngine);


#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt32 GoInt;
typedef GoUint32 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_32_bit_pointer_matching_GoInt[sizeof(void*)==32/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void goGameDLLInit();
extern void goGameDLLInitPost();
extern void goSpawn(edict_t* pEntity);
extern void goSpawnPost(edict_t* pEntity);
extern void goThink(edict_t* pEntity);
extern void goThinkPost(edict_t* pEntity);
extern void goUse(edict_t* pEntity, edict_t* pOther, edict_t* pActivator, float useType, float value);
extern void goUsePost(edict_t* pEntity, edict_t* pOther, edict_t* pActivator, float useType, float value);
extern void goTouch(edict_t* pEntity, edict_t* pOther);
extern void goTouchPost(edict_t* pEntity, edict_t* pOther);
extern void goBlocked(edict_t* pEntity, edict_t* pOther);
extern void goBlockedPost(edict_t* pEntity, edict_t* pOther);
extern qboolean goClientConnect(edict_t* pEntity, char* name, char* address, void* reject);
extern qboolean goClientConnectPost(edict_t* pEntity, char* name, char* address, void* reject);
extern void goClientDisconnect(edict_t* pEntity);
extern void goClientDisconnectPost(edict_t* pEntity);
extern void goClientKill(edict_t* pEntity);
extern void goClientKillPost(edict_t* pEntity);
extern void goClientPutInServer(edict_t* pEntity);
extern void goClientPutInServerPost(edict_t* pEntity);
extern void goClientCommand(edict_t* pEntity);
extern void goClientCommandPost(edict_t* pEntity);
extern void goClientUserInfoChanged(edict_t* pEntity, char* info);
extern void goClientUserInfoChangedPost(edict_t* pEntity, char* info);
extern void goServerActivate(edict_t* pEdictList, int edictCount, int clientMax);
extern void goServerActivatePost(edict_t* pEdictList, int edictCount, int clientMax);
extern void goServerDeactivate();
extern void goServerDeactivatePost();
extern void goPlayerPreThink(edict_t* pEntity);
extern void goPlayerPreThinkPost(edict_t* pEntity);
extern void goPlayerPostThink(edict_t* pEntity);
extern void goPlayerPostThinkPost(edict_t* pEntity);
extern void goStartFrame();
extern void goStartFramePost();
extern void goParmsNewLevel();
extern void goParmsNewLevelPost();
extern void goParmsChangeLevel();
extern void goParmsChangeLevelPost();
extern void goSpectatorConnect(edict_t* pEntity);
extern void goSpectatorConnectPost(edict_t* pEntity);
extern void goSpectatorDisconnect(edict_t* pEntity);
extern void goSpectatorDisconnectPost(edict_t* pEntity);
extern void goSpectatorThink(edict_t* pEntity);
extern void goSpectatorThinkPost(edict_t* pEntity);
extern void goSysError(char* errorString);
extern void goSysErrorPost(char* errorString);
extern void goOnFreeEntPrivateDate(edict_t* pEntity);
extern void goOnFreeEntPrivateDatePost(edict_t* pEntity);
extern void goGameDLLShutdown();
extern void goGameDLLShutdownPost();
extern void callGoFunction(void* f, int argc, char** argv);
extern void getGoCallback(char* category, char* v, void** f);
extern void setGoCallback(char* category, char* v, void* f);
extern void goHookMessageBegin(int msgDest, int msgType, float* pOrigin, edict_t* pEdict);
extern void goHookMessageEnd();
extern int Meta_Attach(int now, META_FUNCTIONS* pFunctionTable, meta_globals_t* pMGlobals, void* pGamedllFuncs);
extern int Meta_Query(char* interfaceVersion, plugin_info_t** plinfo, mutil_funcs_t* pMetaUtilFuncs);
extern int Meta_Detach(int now, int reason);
extern void Meta_Init();
extern void GiveFnptrsToDll(enginefuncs_t* pengfuncsFromEngine, globalvars_t* pGlobals);
extern int GetNewDLLFunctions(NEW_DLL_FUNCTIONS* pNewFunctionTable, int* interfaceVersion);
extern int GetNewDLLFunctions_Post(NEW_DLL_FUNCTIONS* pNewFunctionTable, int* interfaceVersion);
extern int GetEngineFunctions(enginefuncs_t* pengfuncsFromEngine, int* interfaceVersion);
extern int GetEngineFunctions_Post(enginefuncs_t* pengfuncsFromEngine, int* interfaceVersion);
extern int GetEntityAPI2(DLL_FUNCTIONS* pFunctionTable, int* interfaceVersion);
extern int GetEntityAPI2_Post(DLL_FUNCTIONS* pFunctionTable, int* interfaceVersion);

#ifdef __cplusplus
}
#endif
