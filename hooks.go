package metamod_go

/*
#include <eiface.h>

extern int goHookPrecacheModel(char *s);
extern int goHookPrecacheSound(char *s);
extern void goHookSetModel(edict_t *e, const char *m);
extern int goHookModelIndex(const char *m);
extern int goHookModelFrames(int modelIndex);
extern void goHookSetSize(edict_t *e, const float *mins, const float *maxs);
extern void goHookChangeLevel(const char *s1, const char *s2);
extern void goHookGetSpawnParms(edict_t *ent);
extern void goHookSaveSpawnParms(edict_t *ent);
extern float goHookVecToYaw(const float *vec);
extern void goHookVecToAngles(const float *vecIn, float *vecOut);
extern void goHookMoveToOrigin(edict_t *ent, const float *goal, float dist, int moveType);
extern void goHookChangeYaw(edict_t *ent);
extern void goHookChangePitch(edict_t *ent);
extern edict_t* goHookFindEntityByString(edict_t *eStartSearchAfter, const char *field, const char *value);
extern int goHookGetEntityIllum(edict_t *ent);
extern edict_t* goHookFindEntityInSphere(edict_t *eStartSearchAfter, const float *pos, float rad);
extern edict_t* goHookFindClientInPVS(edict_t *e);
extern edict_t* goHookEntitiesInPVS(edict_t *e);
extern void goHookMakeVectors(const float *vec);
extern void goHookAngleVectors(const float *vec, float *forward, float *right, float *up);
extern edict_t* goHookCreateEntity();
extern void goHookRemoveEntity(edict_t *e);
extern edict_t* goHookCreateNamedEntity(int className);
extern void goHookMakeStatic(edict_t *ent);
extern void goHookEntIsOnFloor(edict_t *ent);
extern int goHookDropToFloor(edict_t *ent);
extern int goHookWalkMove(edict_t *ent, float yaw, float dist, int iMode);
extern void goHookSetOrigin(edict_t *e, const float *rgflOrigin);
extern void goHookEmitSound(edict_t *entity, int channel, const char *sample, float volume, float attenuation, int fFlags, int pitch);
extern void goHookEmitAmbientSound(edict_t *entity, float *pos, const char *samp, float vol, float attenuation, int fFlags, int pitch);
extern void goHookTraceLine(const float *v1, const float *v2, int fNoMonsters, edict_t *pentToSkip, TraceResult *ptr);
extern void goHookTraceToss(edict_t *pent, edict_t *pentToIgnore, TraceResult *ptr);
extern int goHookTraceMonsterHull(edict_t *pent, const float *v1, const float *v2, int fNoMonsters, edict_t *pentToSkip, TraceResult *ptr);
extern void goHookTraceHull(const float *v1, const float *v2, int fNoMonsters, int hullNumber, edict_t *pentToSkip, TraceResult *ptr);
extern void goHookTraceModel(const float *v1, const float *v2, int hullNumber, edict_t *pent, TraceResult *ptr);
//extern texture_t* goHookTraceTexture(edict_t *pent, const float *v1, const float *v2);
extern void goHookGetAimVector(edict_t *ent, float speed, float *rgflReturn);
extern void goHookServerCommand(char *str);
extern void goHookServerExecute();
extern void goHookClientCommand(edict_t *pEdict, const char *szFmt);
extern void goHookParticleEffect(const float *org, const float *dir, float color, float count);
extern void goHookLightStyle(int style, char *val);
extern int goHookDecalIndex(const char *name);
extern int goHookPointContents(const float *rgflVector);
extern void goHookMessageBegin(int msg_dest, int msg_type, const float *pOrigin, edict_t *ed);
extern void goHookMessageEnd();
extern void goHookMessageWriteByte(int i);
extern void goHookMessageWriteChar(int i);
extern void goHookMessageWriteShort(int i);
extern void goHookMessageWriteLong(int i);
extern void goHookMessageWriteAngle(float f);
extern void goHookMessageWriteCoord(float f);
extern void goHookMessageWriteString(const char *s);
extern void goHookMessageWriteEntity(int i);
extern void goHookCVarRegister(cvar_t *pCvar);
extern const char* goHookCVarGetString(const char *szVarName);
extern float goHookCVarGetFloat(const char *szVarName);
extern void goHookCVarSetFloat(const char *szVarName, float flValue);
extern void goHookCVarSetString(const char *szVarName, const char *szValue);
extern void goHookAlertMessage(ALERT_TYPE atype, char *szFmt);
extern void goHookEngineFprintf(FILE *pfile, char *szFmt);
extern void* goHookPvAllocEntPrivateData(edict_t *ent, int32 cb);
extern void* goHookPvEntPrivateData(edict_t *ent);
extern void goHookFreeEntPrivateData(edict_t *ent);
extern const char* goHookSzFromIndex(int iString);
extern int goHookAllocString(const char *str);
extern struct entvars_s* goHookGetVarsOfEnt(edict_t *ent);
extern int goHookIndexOfEdict(const edict_t *pEdict);
extern edict_t* goHookPEntityOfEntIndex(int index);
extern edict_t* goHookFindEntityByVars(struct entvars_s *pvars);
extern void* goHookGetModelPtr(edict_t *pEdict);
extern int goHookRegUserMsg(const char *pszName, int iSize);
extern void goHookAnimationAutomove(const edict_t *pEdict, float flTime);
extern void goHookGetBonePosition(const edict_t *pEdict, int iBone, float *rgflOrigin, float *rgflAngles);
extern uint32 goHookFunctionFromName(const char *pName);
extern const char* goHookNameForFunction(uint32 function);
extern void goHookClientPrint(edict_t *pEdict, PRINT_TYPE ptype, const char *szMsg);
extern void goHookServerPrint(const char *szMsg);
extern const char* goHookCmd_Args();
extern const char* goHookCmd_Argv(int argc);
extern int goHookCmd_Argc();
extern void goHookAddServerCommand(char *cmd_name, void *f);
extern void goHookGetAttachment(const edict_t *pEdict, int iAttachment, float *rgflOrigin, float *rgflAngles);
extern void goHookCRC32_Init(CRC32_t *pulCRC);
extern void goHookCRC32_ProcessBuffer(CRC32_t *pulCRC, void *p, int len);
extern void goHookCRC32_ProcessByte(CRC32_t *pulCRC, unsigned char ch);
extern CRC32_t goHookCRC32_Final(CRC32_t pulCRC);
extern int goHookRandomLong(int lLow, int lHigh);
extern float goHookRandomFloat(float flLow, float flHigh);
extern void goHookSetView(const edict_t *pClient, const edict_t *pViewent);
extern float goHookTime();
extern void goHookCrosshairAngle(const edict_t *pClient, float pitch, float yaw);
extern void* goHookLoadFileForMe(const char *filename, int *pLength);
extern void goHookFreeFile(void *buffer);
extern void goHookEndSection(const char *pszSectionName);
extern int goHookCompareFileTime(const char *filename1, const char *filename2, int *iCompare);
extern void goHookGetGameDir(char *szGetGameDir);
extern void goHookCvar_RegisterVariable(cvar_t *variable);
extern void goHookFadeClientVolume(const edict_t *pEdict, int fadePercent, int fadeOutSeconds, int holdTime, int fadeInSeconds);
extern void goHookSetClientMaxspeed(const edict_t *pEdict, float fNewMaxspeed);
extern edict_t* goHookCreateFakeClient(const char *netname);
extern void goHookRunPlayerMove(edict_t *fakeClient, const float *viewangles, float forwardmove, float sidemove, float upmove, unsigned short buttons, byte impulse, byte msec);
extern int goHookNumberOfEntities();
extern char* goHookGetInfoKeyBuffer(edict_t *e);
extern char* goHookInfoKeyValue(char *infobuffer, char *key);
extern void goHookSetKeyValue(char *infobuffer, char *key, char *value);
extern void goHookSetClientKeyValue(int clientIndex, char *infobuffer, char *key, char *value);
extern int goHookIsMapValid(char *filename);
extern void goHookStaticDecal(const float *origin, int decalIndex, int entityIndex, int modelIndex);
extern int goHookPrecacheGeneric(char *s);
extern int goHookGetPlayerUserId(edict_t *e);
extern void goHookBuildSoundMsg(edict_t *entity, int channel, const char *sample, float volume, float attenuation, int fFlags, int pitch, int msg_dest, int msg_type, const float *pOrigin, edict_t *ed);
extern int goHookIsDedicatedServer();
extern cvar_t* goHookCVarGetPointer(const char *szVarName);
extern unsigned int goHookGetPlayerWONId(edict_t *e);
extern void goHookInfo_RemoveKey(char *s, char *key);
extern char* goHookGetPhysicsKeyValue(const edict_t *pClient, const char *key);
extern void goHookSetPhysicsKeyValue(const edict_t *pClient, const char *key, const char *value);
extern const char* goHookGetPhysicsInfoString(const edict_t *pClient);
extern unsigned short goHookPrecacheEvent(int type, const char *psz);
extern void goHookPlaybackEvent(int flags, const edict_t *pInvoker, unsigned short eventindex, float delay, float *origin, float *angles, float fparam1, float fparam2, int iparam1, int iparam2, int bparam1, int bparam2);
extern unsigned char* goHookSetFatPVS(float *origin);
extern unsigned char* goHookSetFatPAS(float *origin);
extern int goHookCheckVisibility(const edict_t *entity, unsigned char *pset);
extern void goHookDeltaSetField(struct delta_s *pFields, const char *fieldname);
extern void goHookDeltaUnsetField(struct delta_s *pFields, const char *fieldname);
extern void goHookDeltaAddEncoder(char *name, void (*conditionalencode)(struct delta_s *pFields, const unsigned char *from, const unsigned char *to));
extern int goHookGetCurrentPlayer();
extern int goHookCanSkipPlayer(const edict_t *player);
extern int goHookDeltaFindField(struct delta_s *pFields, const char *fieldname);
extern void goHookDeltaSetFieldByIndex(struct delta_s *pFields, int fieldNumber);
extern void goHookDeltaUnsetFieldByIndex(struct delta_s *pFields, int fieldNumber);
extern void goHookSetGroupMask(int mask, int op);
extern int goHookCreateInstancedBaseline(int classname, struct entity_state_s *baseline);
extern void goHookCvar_DirectSet(cvar_t *var, char *value);
extern void goHookForceUnmodified(FORCE_TYPE type, float *rgflOrigin, float *rgflAngles, const char *szKeyName);
extern void goHookGetPlayerStats(const edict_t *pClient, int *ping, int *packet_loss);
extern int goHookVoice_GetClientListening(int iReceiver, int iSender);
extern int goHookVoice_SetClientListening(int iReceiver, int iSender, int bListen);
extern const char* goHookGetPlayerAuthId(edict_t *e);
extern sequenceEntry_s goHookSequenceGet(const char *fileName, const char *entryName);
extern sentenceEntry_s goHookSequencePickSentence(const char *groupName, int pickMethod, int *picked);
extern int goHookGetFileSize(char *filename);
extern unsigned int goHookGetApproxWavePlayLen(const char *filepath);
extern int goHookIsCareerMatch();
extern int goHookGetLocalizedStringLength(const char *label);
extern void goHookRegisterTutorMessageShown(int mid);
extern int goHookGetTimesTutorMessageShown(int mid);
extern void goHookProcessTutorMessageDecayBuffer(int *buffer, int bufferLength);
extern void goHookConstructTutorMessageDecayBuffer(int *buffer, int bufferLength);
extern void goHookResetTutorMessageDecayData();
extern void goHookQueryClientCvarValue(edict_t *player, const char *cvarName);
extern void goHookQueryClientCvarValue2(edict_t *player, const char *cvarName, int requestID);
extern void goHookCheckParm(const char *psz, char *pchParam);
extern edict_t* goHookPEntityOfEntIndexAllEntities(int iEntIndex);

void SetHooks(enginefuncs_t *pengfuncsFromEngine) {
	memset(pengfuncsFromEngine, 0, sizeof(enginefuncs_t));

	pengfuncsFromEngine->pfnPrecacheModel = goHookPrecacheModel;
	pengfuncsFromEngine->pfnPrecacheSound = goHookPrecacheSound;
	pengfuncsFromEngine->pfnSetModel = goHookSetModel;
	pengfuncsFromEngine->pfnModelIndex = goHookModelIndex;
	pengfuncsFromEngine->pfnModelFrames = goHookModelFrames;
	pengfuncsFromEngine->pfnSetSize = goHookSetSize;
	pengfuncsFromEngine->pfnChangeLevel = goHookChangeLevel;
	//pengfuncsFromEngine->pfnGetSpawnParms = goHookGetSpawnParms;
	//pengfuncsFromEngine->pfnSaveSpawnParms = goHookSaveSpawnParms;
	pengfuncsFromEngine->pfnVecToYaw = goHookVecToYaw;
	pengfuncsFromEngine->pfnVecToAngles = goHookVecToAngles;
	pengfuncsFromEngine->pfnMoveToOrigin = goHookMoveToOrigin;
	pengfuncsFromEngine->pfnChangeYaw = goHookChangeYaw;
	pengfuncsFromEngine->pfnChangePitch = goHookChangePitch;
	pengfuncsFromEngine->pfnFindEntityByString = goHookFindEntityByString;
	pengfuncsFromEngine->pfnGetEntityIllum = goHookGetEntityIllum;
	pengfuncsFromEngine->pfnFindEntityInSphere = goHookFindEntityInSphere;
	pengfuncsFromEngine->pfnFindClientInPVS = goHookFindClientInPVS;
	pengfuncsFromEngine->pfnEntitiesInPVS = goHookEntitiesInPVS;
	pengfuncsFromEngine->pfnMakeVectors = goHookMakeVectors;
	pengfuncsFromEngine->pfnAngleVectors = goHookAngleVectors;
	pengfuncsFromEngine->pfnCreateEntity = goHookCreateEntity;
	pengfuncsFromEngine->pfnRemoveEntity = goHookRemoveEntity;
	pengfuncsFromEngine->pfnCreateNamedEntity = goHookCreateNamedEntity;
	pengfuncsFromEngine->pfnMakeStatic = goHookMakeStatic;
	pengfuncsFromEngine->pfnEntIsOnFloor = goHookEntIsOnFloor;
	pengfuncsFromEngine->pfnDropToFloor = goHookDropToFloor;
	pengfuncsFromEngine->pfnWalkMove = goHookWalkMove;
	pengfuncsFromEngine->pfnSetOrigin = goHookSetOrigin;
	pengfuncsFromEngine->pfnEmitSound = goHookEmitSound;
	pengfuncsFromEngine->pfnEmitAmbientSound = goHookEmitAmbientSound;
	pengfuncsFromEngine->pfnTraceLine = goHookTraceLine;
	pengfuncsFromEngine->pfnTraceToss = goHookTraceToss;
	pengfuncsFromEngine->pfnTraceMonsterHull = goHookTraceMonsterHull;
	pengfuncsFromEngine->pfnTraceHull = goHookTraceHull;
	pengfuncsFromEngine->pfnTraceModel = goHookTraceModel;
	//pengfuncsFromEngine->pfnTraceTexture = goHookTraceTexture;
	pengfuncsFromEngine->pfnGetAimVector = goHookGetAimVector;
	pengfuncsFromEngine->pfnServerCommand = goHookServerCommand;
	pengfuncsFromEngine->pfnServerExecute = goHookServerExecute;
	pengfuncsFromEngine->pfnClientCommand = goHookClientCommand;
	pengfuncsFromEngine->pfnParticleEffect = goHookParticleEffect;
	pengfuncsFromEngine->pfnLightStyle = goHookLightStyle;
	pengfuncsFromEngine->pfnDecalIndex = goHookDecalIndex;
	pengfuncsFromEngine->pfnPointContents = goHookPointContents;
	//pengfuncsFromEngine->pfnMessageBegin = goHookMessageBegin;
	//pengfuncsFromEngine->pfnMessageEnd = goHookMessageEnd;
	//pengfuncsFromEngine->pfnWriteByte = goHookMessageWriteByte;
	//pengfuncsFromEngine->pfnWriteChar = goHookMessageWriteChar;
	//pengfuncsFromEngine->pfnWriteShort = goHookMessageWriteShort;
	//pengfuncsFromEngine->pfnWriteLong = goHookMessageWriteLong;
	//pengfuncsFromEngine->pfnWriteAngle = goHookMessageWriteAngle;
	//pengfuncsFromEngine->pfnWriteCoord = goHookMessageWriteCoord;
	//pengfuncsFromEngine->pfnWriteString = goHookMessageWriteString;
	//pengfuncsFromEngine->pfnWriteEntity = goHookMessageWriteEntity;
	pengfuncsFromEngine->pfnCVarRegister = goHookCVarRegister;
	pengfuncsFromEngine->pfnCVarGetString = goHookCVarGetString;
	pengfuncsFromEngine->pfnCVarGetFloat = goHookCVarGetFloat;
	pengfuncsFromEngine->pfnCVarSetFloat = goHookCVarSetFloat;
	pengfuncsFromEngine->pfnCVarSetString = goHookCVarSetString;
	pengfuncsFromEngine->pfnAlertMessage = goHookAlertMessage;
	//pengfuncsFromEngine->pfnEngineFprintf = goHookEngineFprintf;
	pengfuncsFromEngine->pfnPvAllocEntPrivateData = goHookPvAllocEntPrivateData;
	pengfuncsFromEngine->pfnPvEntPrivateData = goHookPvEntPrivateData;
	pengfuncsFromEngine->pfnFreeEntPrivateData = goHookFreeEntPrivateData;
	//pengfuncsFromEngine->pfnSzFromIndex = goHookSzFromIndex;
	//pengfuncsFromEngine->pfnAllocString = goHookAllocString;
	//pengfuncsFromEngine->pfnGetVarsOfEnt = goHookGetVarsOfEnt;
	pengfuncsFromEngine->pfnIndexOfEdict = goHookIndexOfEdict;
	pengfuncsFromEngine->pfnPEntityOfEntIndex = goHookPEntityOfEntIndex;
	pengfuncsFromEngine->pfnFindEntityByVars = goHookFindEntityByVars;
	pengfuncsFromEngine->pfnGetModelPtr = goHookGetModelPtr;
	pengfuncsFromEngine->pfnRegUserMsg = goHookRegUserMsg;
	//pengfuncsFromEngine->pfnAnimationAutomove = goHookAnimationAutomove;
	//pengfuncsFromEngine->pfnGetBonePosition = goHookGetBonePosition;
	pengfuncsFromEngine->pfnFunctionFromName = goHookFunctionFromName;
	pengfuncsFromEngine->pfnNameForFunction = goHookNameForFunction;
	pengfuncsFromEngine->pfnClientPrintf = goHookClientPrint;
	pengfuncsFromEngine->pfnServerPrint = goHookServerPrint;
	//pengfuncsFromEngine->pfnCmd_Args = goHookCmd_Args;
	//pengfuncsFromEngine->pfnCmd_Argv = goHookCmd_Argv;
	//pengfuncsFromEngine->pfnCmd_Argc = goHookCmd_Argc;
	pengfuncsFromEngine->pfnAddServerCommand = goHookAddServerCommand;
	pengfuncsFromEngine->pfnGetAttachment = goHookGetAttachment;
	//pengfuncsFromEngine->pfnCRC32_Init = goHookCRC32_Init;
	//pengfuncsFromEngine->pfnCRC32_ProcessBuffer = goHookCRC32_ProcessBuffer;
	//pengfuncsFromEngine->pfnCRC32_ProcessByte = goHookCRC32_ProcessByte;
	//pengfuncsFromEngine->pfnCRC32_Final = goHookCRC32_Final;
	pengfuncsFromEngine->pfnRandomLong = goHookRandomLong;
	pengfuncsFromEngine->pfnRandomFloat = goHookRandomFloat;
	pengfuncsFromEngine->pfnSetView = goHookSetView;
	pengfuncsFromEngine->pfnTime = goHookTime;
	pengfuncsFromEngine->pfnCrosshairAngle = goHookCrosshairAngle;
	pengfuncsFromEngine->pfnLoadFileForMe = goHookLoadFileForMe;
	//pengfuncsFromEngine->pfnFreeFile = goHookFreeFile;
	//pengfuncsFromEngine->pfnEndSection = goHookEndSection;
	//pengfuncsFromEngine->pfnCompareFileTime = goHookCompareFileTime;
	pengfuncsFromEngine->pfnGetGameDir = goHookGetGameDir;
	pengfuncsFromEngine->pfnCvar_RegisterVariable = goHookCvar_RegisterVariable;
	pengfuncsFromEngine->pfnFadeClientVolume = goHookFadeClientVolume;
	pengfuncsFromEngine->pfnSetClientMaxspeed = goHookSetClientMaxspeed;
	pengfuncsFromEngine->pfnCreateFakeClient = goHookCreateFakeClient;
	pengfuncsFromEngine->pfnRunPlayerMove = goHookRunPlayerMove;
	pengfuncsFromEngine->pfnNumberOfEntities = goHookNumberOfEntities;
	pengfuncsFromEngine->pfnGetInfoKeyBuffer = goHookGetInfoKeyBuffer;
	pengfuncsFromEngine->pfnInfoKeyValue = goHookInfoKeyValue;
	pengfuncsFromEngine->pfnSetKeyValue = goHookSetKeyValue;
	pengfuncsFromEngine->pfnSetClientKeyValue = goHookSetClientKeyValue;
	pengfuncsFromEngine->pfnIsMapValid = goHookIsMapValid;
	pengfuncsFromEngine->pfnStaticDecal = goHookStaticDecal;
	pengfuncsFromEngine->pfnPrecacheGeneric = goHookPrecacheGeneric;
	pengfuncsFromEngine->pfnGetPlayerUserId = goHookGetPlayerUserId;
	//pengfuncsFromEngine->pfnBuildSoundMsg = goHookBuildSoundMsg;
	pengfuncsFromEngine->pfnIsDedicatedServer = goHookIsDedicatedServer;
	pengfuncsFromEngine->pfnCVarGetPointer = goHookCVarGetPointer;
	pengfuncsFromEngine->pfnGetPlayerWONId = goHookGetPlayerWONId;
	pengfuncsFromEngine->pfnInfo_RemoveKey = goHookInfo_RemoveKey;
	pengfuncsFromEngine->pfnGetPhysicsKeyValue = goHookGetPhysicsKeyValue;
	pengfuncsFromEngine->pfnSetPhysicsKeyValue = goHookSetPhysicsKeyValue;
	pengfuncsFromEngine->pfnGetPhysicsInfoString = goHookGetPhysicsInfoString;
	pengfuncsFromEngine->pfnPrecacheEvent = goHookPrecacheEvent;
	pengfuncsFromEngine->pfnPlaybackEvent = goHookPlaybackEvent;
	pengfuncsFromEngine->pfnSetFatPVS = goHookSetFatPVS;
	pengfuncsFromEngine->pfnSetFatPAS = goHookSetFatPAS;
	//pengfuncsFromEngine->pfnCheckVisibility = goHookCheckVisibility;
	//pengfuncsFromEngine->pfnDeltaSetField = goHookDeltaSetField;
	//pengfuncsFromEngine->pfnDeltaUnsetField = goHookDeltaUnsetField;
	//pengfuncsFromEngine->pfnDeltaAddEncoder = goHookDeltaAddEncoder;
	//pengfuncsFromEngine->pfnGetCurrentPlayer = goHookGetCurrentPlayer;
	//pengfuncsFromEngine->pfnCanSkipPlayer = goHookCanSkipPlayer;
	//pengfuncsFromEngine->pfnDeltaFindField = goHookDeltaFindField;
	//pengfuncsFromEngine->pfnDeltaSetFieldByIndex = goHookDeltaSetFieldByIndex;
	//pengfuncsFromEngine->pfnDeltaUnsetFieldByIndex = goHookDeltaUnsetFieldByIndex;
	//pengfuncsFromEngine->pfnSetGroupMask = goHookSetGroupMask;
	//pengfuncsFromEngine->pfnCreateInstancedBaseline = goHookCreateInstancedBaseline;
	pengfuncsFromEngine->pfnCvar_DirectSet = goHookCvar_DirectSet;
	//pengfuncsFromEngine->pfnForceUnmodified = goHookForceUnmodified;
	pengfuncsFromEngine->pfnGetPlayerStats = goHookGetPlayerStats;
	//pengfuncsFromEngine->pfnVoice_GetClientListening = goHookVoice_GetClientListening;
	//pengfuncsFromEngine->pfnVoice_SetClientListening = goHookVoice_SetClientListening;
	pengfuncsFromEngine->pfnGetPlayerAuthId = goHookGetPlayerAuthId;
	//pengfuncsFromEngine->pfnSequenceGet = goHookSequenceGet;
	//pengfuncsFromEngine->pfnSequencePickSentence = goHookSequencePickSentence;
	//pengfuncsFromEngine->pfnGetFileSize = goHookGetFileSize;
	//pengfuncsFromEngine->pfnGetApproxWavePlayLen = goHookGetApproxWavePlayLen;
	//pengfuncsFromEngine->pfnIsCareerMatch = goHookIsCareerMatch;
	//pengfuncsFromEngine->pfnGetLocalizedStringLength = goHookGetLocalizedStringLength;
	//pengfuncsFromEngine->pfnRegisterTutorMessageShown = goHookRegisterTutorMessageShown;
	//pengfuncsFromEngine->pfnGetTimesTutorMessageShown = goHookGetTimesTutorMessageShown;
	pengfuncsFromEngine->pfnQueryClientCvarValue = goHookQueryClientCvarValue;
	pengfuncsFromEngine->pfnQueryClientCvarValue2 = goHookQueryClientCvarValue2;
	//pengfuncsFromEngine->pfnCheckParm = goHookCheckParm;
	//pengfuncsFromEngine->pfnPEntityOfEntIndex = goHookPEntityOfEntIndexAllEntities;
}
*/
import "C"
